// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: calculatorpb/calculatorpb.proto

package calculatorpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CalculatorServiceClient is the client API for CalculatorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CalculatorServiceClient interface {
	SquareRoot(ctx context.Context, in *SquareRequest, opts ...grpc.CallOption) (*SquareResponse, error)
	PerfectNumber(ctx context.Context, in *PerfectNumberRequest, opts ...grpc.CallOption) (CalculatorService_PerfectNumberClient, error)
	TotalNumber(ctx context.Context, opts ...grpc.CallOption) (CalculatorService_TotalNumberClient, error)
	FindMinimum(ctx context.Context, opts ...grpc.CallOption) (CalculatorService_FindMinimumClient, error)
}

type calculatorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCalculatorServiceClient(cc grpc.ClientConnInterface) CalculatorServiceClient {
	return &calculatorServiceClient{cc}
}

func (c *calculatorServiceClient) SquareRoot(ctx context.Context, in *SquareRequest, opts ...grpc.CallOption) (*SquareResponse, error) {
	out := new(SquareResponse)
	err := c.cc.Invoke(ctx, "/calculator.CalculatorService/SquareRoot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calculatorServiceClient) PerfectNumber(ctx context.Context, in *PerfectNumberRequest, opts ...grpc.CallOption) (CalculatorService_PerfectNumberClient, error) {
	stream, err := c.cc.NewStream(ctx, &CalculatorService_ServiceDesc.Streams[0], "/calculator.CalculatorService/PerfectNumber", opts...)
	if err != nil {
		return nil, err
	}
	x := &calculatorServicePerfectNumberClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CalculatorService_PerfectNumberClient interface {
	Recv() (*PerfectNumberResponse, error)
	grpc.ClientStream
}

type calculatorServicePerfectNumberClient struct {
	grpc.ClientStream
}

func (x *calculatorServicePerfectNumberClient) Recv() (*PerfectNumberResponse, error) {
	m := new(PerfectNumberResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *calculatorServiceClient) TotalNumber(ctx context.Context, opts ...grpc.CallOption) (CalculatorService_TotalNumberClient, error) {
	stream, err := c.cc.NewStream(ctx, &CalculatorService_ServiceDesc.Streams[1], "/calculator.CalculatorService/TotalNumber", opts...)
	if err != nil {
		return nil, err
	}
	x := &calculatorServiceTotalNumberClient{stream}
	return x, nil
}

type CalculatorService_TotalNumberClient interface {
	Send(*TotalNumberRequest) error
	CloseAndRecv() (*TotalNumberResponse, error)
	grpc.ClientStream
}

type calculatorServiceTotalNumberClient struct {
	grpc.ClientStream
}

func (x *calculatorServiceTotalNumberClient) Send(m *TotalNumberRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *calculatorServiceTotalNumberClient) CloseAndRecv() (*TotalNumberResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(TotalNumberResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *calculatorServiceClient) FindMinimum(ctx context.Context, opts ...grpc.CallOption) (CalculatorService_FindMinimumClient, error) {
	stream, err := c.cc.NewStream(ctx, &CalculatorService_ServiceDesc.Streams[2], "/calculator.CalculatorService/FindMinimum", opts...)
	if err != nil {
		return nil, err
	}
	x := &calculatorServiceFindMinimumClient{stream}
	return x, nil
}

type CalculatorService_FindMinimumClient interface {
	Send(*FindMinimumRequest) error
	Recv() (*FindMinimumResponse, error)
	grpc.ClientStream
}

type calculatorServiceFindMinimumClient struct {
	grpc.ClientStream
}

func (x *calculatorServiceFindMinimumClient) Send(m *FindMinimumRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *calculatorServiceFindMinimumClient) Recv() (*FindMinimumResponse, error) {
	m := new(FindMinimumResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CalculatorServiceServer is the server API for CalculatorService service.
// All implementations must embed UnimplementedCalculatorServiceServer
// for forward compatibility
type CalculatorServiceServer interface {
	SquareRoot(context.Context, *SquareRequest) (*SquareResponse, error)
	PerfectNumber(*PerfectNumberRequest, CalculatorService_PerfectNumberServer) error
	TotalNumber(CalculatorService_TotalNumberServer) error
	FindMinimum(CalculatorService_FindMinimumServer) error
	mustEmbedUnimplementedCalculatorServiceServer()
}

// UnimplementedCalculatorServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCalculatorServiceServer struct {
}

func (UnimplementedCalculatorServiceServer) SquareRoot(context.Context, *SquareRequest) (*SquareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SquareRoot not implemented")
}
func (UnimplementedCalculatorServiceServer) PerfectNumber(*PerfectNumberRequest, CalculatorService_PerfectNumberServer) error {
	return status.Errorf(codes.Unimplemented, "method PerfectNumber not implemented")
}
func (UnimplementedCalculatorServiceServer) TotalNumber(CalculatorService_TotalNumberServer) error {
	return status.Errorf(codes.Unimplemented, "method TotalNumber not implemented")
}
func (UnimplementedCalculatorServiceServer) FindMinimum(CalculatorService_FindMinimumServer) error {
	return status.Errorf(codes.Unimplemented, "method FindMinimum not implemented")
}
func (UnimplementedCalculatorServiceServer) mustEmbedUnimplementedCalculatorServiceServer() {}

// UnsafeCalculatorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CalculatorServiceServer will
// result in compilation errors.
type UnsafeCalculatorServiceServer interface {
	mustEmbedUnimplementedCalculatorServiceServer()
}

func RegisterCalculatorServiceServer(s grpc.ServiceRegistrar, srv CalculatorServiceServer) {
	s.RegisterService(&CalculatorService_ServiceDesc, srv)
}

func _CalculatorService_SquareRoot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SquareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalculatorServiceServer).SquareRoot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/calculator.CalculatorService/SquareRoot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalculatorServiceServer).SquareRoot(ctx, req.(*SquareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CalculatorService_PerfectNumber_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PerfectNumberRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CalculatorServiceServer).PerfectNumber(m, &calculatorServicePerfectNumberServer{stream})
}

type CalculatorService_PerfectNumberServer interface {
	Send(*PerfectNumberResponse) error
	grpc.ServerStream
}

type calculatorServicePerfectNumberServer struct {
	grpc.ServerStream
}

func (x *calculatorServicePerfectNumberServer) Send(m *PerfectNumberResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _CalculatorService_TotalNumber_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CalculatorServiceServer).TotalNumber(&calculatorServiceTotalNumberServer{stream})
}

type CalculatorService_TotalNumberServer interface {
	SendAndClose(*TotalNumberResponse) error
	Recv() (*TotalNumberRequest, error)
	grpc.ServerStream
}

type calculatorServiceTotalNumberServer struct {
	grpc.ServerStream
}

func (x *calculatorServiceTotalNumberServer) SendAndClose(m *TotalNumberResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *calculatorServiceTotalNumberServer) Recv() (*TotalNumberRequest, error) {
	m := new(TotalNumberRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _CalculatorService_FindMinimum_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CalculatorServiceServer).FindMinimum(&calculatorServiceFindMinimumServer{stream})
}

type CalculatorService_FindMinimumServer interface {
	Send(*FindMinimumResponse) error
	Recv() (*FindMinimumRequest, error)
	grpc.ServerStream
}

type calculatorServiceFindMinimumServer struct {
	grpc.ServerStream
}

func (x *calculatorServiceFindMinimumServer) Send(m *FindMinimumResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *calculatorServiceFindMinimumServer) Recv() (*FindMinimumRequest, error) {
	m := new(FindMinimumRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CalculatorService_ServiceDesc is the grpc.ServiceDesc for CalculatorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CalculatorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "calculator.CalculatorService",
	HandlerType: (*CalculatorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SquareRoot",
			Handler:    _CalculatorService_SquareRoot_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PerfectNumber",
			Handler:       _CalculatorService_PerfectNumber_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "TotalNumber",
			Handler:       _CalculatorService_TotalNumber_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "FindMinimum",
			Handler:       _CalculatorService_FindMinimum_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "calculatorpb/calculatorpb.proto",
}
